#+TITLE: Emacs Config
#+STARTUP: showeverything

* Table of contents :TOC_3:noexport:
- [[#lexical-binding][Lexical Binding]]
- [[#user-information][User Information]]
- [[#fonts][Fonts]]
- [[#theme][Theme]]
- [[#org][Org]]
  - [[#store-org-files-under-documents-directory][Store org files under Documents directory.]]
  - [[#open-pdf-with-zathura][Open PDF with zathura.]]
  - [[#pretty-table][Pretty Table]]
  - [[#auto-tangle][Auto Tangle]]
- [[#org-roam][Org Roam]]
  - [[#set-variables][Set variables]]
  - [[#roam-capture-templates][Roam capture templates]]
    - [[#dailies-capture-templates][Dailies Capture Templates]]
  - [[#org-roam-ui][Org Roam UI]]
  - [[#anki][Anki]]
- [[#line-numbering][Line Numbering]]
- [[#ispell][Ispell]]
- [[#better-defaults][Better Defaults]]
- [[#nix][Nix]]
- [[#very-large-files][Very Large Files]]
- [[#email][Email]]
- [[#key-mapping][Key Mapping]]
  - [[#avy][Avy]]
  - [[#zen-mode][Zen mode]]
  - [[#org-tree-slide][Org Tree Slide]]

* Lexical Binding
#+BEGIN_SRC emacs-lisp
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC

* User Information
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Moritz BÃ¶hme"
      user-mail-address "mail@moritzboeh.me")
#+END_SRC

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:
+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:
#+BEGIN_EXAMPLE emacs-lisp
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 14) )
#+END_SRC

* Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dracula)
#+END_SRC

* Org
** Store org files under Documents directory.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Nextcloud/Notes/org")
#+END_SRC

** Open PDF with zathura.
#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      '((remote . emacs)
       (auto-mode . emacs)
       (directory . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . "zathura %s")))
#+END_SRC

** Pretty Table
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-pretty-table-mode)))
#+END_SRC
** Auto Tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config (setq org-auto-tangle-default t))
#+end_src

* Org Roam
** Set variables
#+begin_src emacs-lisp
(setq org-roam-directory "~/Nextcloud/Notes/org-roam"
      anki-directory (concat (file-name-as-directory org-roam-directory) "anki")
      org-roam-dailies-directory (concat (file-name-as-directory org-roam-directory) "daily")
      org-roam-node-display-template "${title} ${doom-tags:45}")
#+end_src

** Roam capture templates
#+BEGIN_SRC emacs-lisp
(setq org-roam-capture-templates
      '(
        ("d" "default" plain "%?"
         :if-new (file+head "main/${slug}.org" "#+title: ${title}\n")
         :unnarrowed t)
        ("a" "anki Basic" plain "#+filetags: %^g\n* ${title}\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: Mega\n:END:\n** Front\n%^{Short Description}\n** Back\n%?"
         :if-new (file+head "%(print anki-directory)/%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title}\n")
         :unnarrowed t)
        ("A" "anki Cloze" plain "#+filetags: %^g\n* ${title}\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Mega\n:END:\n** Text\n%?"
         :if-new (file+head "%(print anki-directory)/%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title}\n")
         :unnarrowed t)
      )
)
#+END_SRC

*** Dailies Capture Templates
#+begin_src emacs-lisp
(setq org-roam-dailies-capture-templates
   (let ((head
          (concat
           "#+title: %<%A, %d %B %Y>\n#+roam_tags: Dailies\n* Inbox\n* Log\n"
           "* [/] Do Today\n- [ ] Watch news\n- [ ] Read E-Mails\n- [ ] Flashcards\n* [/] Possibly Do Today\n")))
     `(("d" "default" entry
        "* %?"
        :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org", head ("Inbox"))
        :unnarrowed t)
       ("D" "default + reference" entry
        "* %? %a"
        :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org", head ("Inbox"))
        :unnarrowed t)
       ("j" "journal" entry
        "* %U: %?"
        :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org", head ("Log")))
       ("J" "journal + refernce" entry
        "* %U: %? %a"
        :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org", head ("Log")))
       ("t" "Do Today" item
        "[ ] %?"
        :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org", head ("Do Today")))
       ("p" "Possibly Do Today" item
        "[ ] %?"
        :if-new (file+head+olp "%<%Y>/%<%B>/%<%Y-%m-%d>.org", head ("Possibly Do Today")))
       )))
#+end_src

** Org Roam UI
#+BEGIN_SRC emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC

** Anki
#+begin_src emacs-lisp
(use-package! anki-editor
    :after org-roam
    :init
    (setq anki-editor-create-decks t
          anki-editor-org-tags-as-anki-tags t
          anki-editor-use-math-jax t))

(defun parent-directory (directory)
  (file-name-directory (directory-file-name directory)))

(defun parent-directories (directory)
  (setq directory (file-name-as-directory (expand-file-name directory)))
   ;; if directory == "/" return ("/")
   (if (equal directory "/")
      (list directory)
    ;; else return list containing directory and parent-dirs of the parent directory
    (cons directory (parent-directories (parent-directory directory)))))

(defun has-sub-path (sub-path path)
  (setq sub-path (file-name-as-directory (expand-file-name sub-path)))
  (setq path (file-name-as-directory (expand-file-name path)))
  (member sub-path (parent-directories path)))

(add-hook 'org-mode-hook
          (lambda () (when (has-sub-path anki-directory default-directory)
                         (anki-editor-mode))))

(add-hook 'anki-editor-mode-hook
          (lambda () (add-hook 'before-save-hook
                               (cmd! (anki-editor-push-notes '(16))))))

#+end_src

* Line Numbering
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

* Ispell
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ispell"
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "de_DE,en_GB,en_US")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "de_DE,en_GB,en_US")
  ;; For saving words to the personal dictionary, don't infer it from
  ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
  (setq ispell-personal-dictionary "~/.config/doom/.dictionary.txt"))
#+END_SRC

The personal dictionary file has to exist, otherwise hunspell will silently not use it.
#+BEGIN_SRC emacs-lisp
(unless (file-exists-p ispell-personal-dictionary)
  (write-region "" nil ispell-personal-dictionary nil 0))
#+END_SRC

* Better Defaults
#+BEGIN_SRC emacs-lisp
(setq-default
 delete-by-moving-to-trash t)          ; Delete files to trash

(setq undo-limit 80000000             ; Raise undo-limit to 80Mb
      evil-want-fine-undo t           ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t)            ; Nobody likes to loose work, I certainly don't
#+END_SRC

* Nix
#+begin_src emacs-lisp
(setq-hook! 'nix-mode-hook company-idle-delay 0.2)
#+end_src

* Very Large Files
#+BEGIN_SRC emacs-lisp
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+END_SRC

* Email
Mu4e configuration.
#+begin_src emacs-lisp
(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))
(set-email-account! "default"
  '((mu4e-sent-folder       . "/Sent")
    (mu4e-drafts-folder     . "/Drafts")
    (mu4e-trash-folder      . "/Trash")
    (mu4e-refile-folder     . "/All Mail")
    (smtpmail-smtp-user     . "mail@moritzboeh.me"))
  t)
(setq! mu4e-maildir-shortcuts
       '(
         (:maildir "/Inbox" :key ?i)
         (:maildir "/Archive" :key ?a)
         (:maildir "/Drafts" :key ?d)
         ))
#+end_src

* Key Mapping
** Avy
#+BEGIN_SRC emacs-lisp
(map! :n "g s s" 'evil-avy-goto-char-timer)
#+END_SRC
** Zen mode
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Zen mode (fullscreen)"
      "t z" '+zen/toggle-fullscreen
      "t Z" nil)
#+END_SRC
** Org Tree Slide
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "org-tree-slide"
  (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
  (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)
  )
#+END_SRC
