#+TITLE: Emacs Config
#+STARTUP: showeverything

* Table of contents :TOC_3:noexport:
- [[#lexical-binding][Lexical Binding]]
- [[#user-information][User Information]]
- [[#fonts][Fonts]]
- [[#latex][Latex]]
- [[#theme][Theme]]
- [[#org][Org]]
  - [[#store-org-files-under-documents-directory][Store org files under Documents directory.]]
  - [[#open-pdf-with-zathura][Open PDF with zathura.]]
  - [[#pretty-table][Pretty Table]]
- [[#org-roam][Org Roam]]
    - [[#roam-capture-templates][Roam capture templates]]
    - [[#org-roam-ui][Org Roam UI]]
    - [[#anki][Anki]]
- [[#line-numbering][Line Numbering]]
- [[#ispell][Ispell]]
- [[#better-defaults][Better Defaults]]
- [[#very-large-files][Very Large Files]]
- [[#key-mapping][Key Mapping]]
  - [[#avy][Avy]]
  - [[#zen-mode][Zen mode]]
  - [[#org-tree-slide][Org Tree Slide]]

* Lexical Binding
#+BEGIN_SRC emacs-lisp
;;; init.el -*- lexical-binding: t; -*-
#+END_SRC

* User Information
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Moritz BÃ¶hme"
      user-mail-address "mail@moritzboeh.me")
#+END_SRC

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:
+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:
#+BEGIN_EXAMPLE emacs-lisp
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 14) )
#+END_SRC

* Latex
Compile on save.
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook (lambda ()
                             (add-hook 'after-save-hook (lambda () (TeX-command "LatexMk" #'TeX-master-file)))))
#+END_SRC

* Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dracula)
#+END_SRC

* Org
** Store org files under Documents directory.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Nextcloud/Notes/org")
#+END_SRC

** Open PDF with zathura.
#+BEGIN_SRC emacs-lisp
(setq org-file-apps
      '((remote . emacs)
       (auto-mode . emacs)
       (directory . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . "zathura %s")))
#+END_SRC

** Pretty Table
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (org-pretty-table-mode)))
#+END_SRC

* Org Roam
*** Roam capture templates
#+BEGIN_SRC emacs-lisp
(setq org-roam-directory "~/Nextcloud/Notes/org-roam")
(setq anki-directory (concat org-roam-directory "/anki"))
(setq org-roam-capture-templates
      '(
        ("d" "default" plain "%?"
         :if-new (file+head "main/${slug}.org" "#+title: ${title}\n")
         :unnarrowed t)
        ("a" "anki Basic" plain "#+filetags: %^g\n* ${title}\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: Mega\n:END:\n** Front\n%^{Short Description}\n** Back\n%?"
         :if-new (file+head "%(print anki-directory)/%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title}\n")
         :unnarrowed t)
        ("A" "anki Cloze" plain "#+filetags: %^g\n* ${title}\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Mega\n:END:\n** Text\n%?"
         :if-new (file+head "%(print anki-directory)/%<%Y%m%d%H%M%S>-${slug}.org"
                            "#+title: ${title}\n")
         :unnarrowed t)
      )
)

(setq org-roam-node-display-template "${title} ${doom-tags:45}")
(setq org-roam-dailies-directory "~/Nextcloud/Notes/org-roam/daily")
(setq org-agenda-files (list org-directory org-roam-dailies-directory))
#+END_SRC

*** Org Roam UI
#+BEGIN_SRC emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC

*** Anki
#+begin_src emacs-lisp
(use-package! anki-editor
    :after org-roam
    :init
    (setq anki-editor-create-decks t
          anki-editor-org-tags-as-anki-tags t
          anki-editor-use-math-jax t))

(map! :leader
      :desc "Push Anki Notes"
      "n r A" (cmd! (anki-editor-push-notes '(4))))

(add-hook 'org-mode-hook
          (lambda () (if (member (file-name-as-directory (expand-file-name anki-directory)) (parent-dirs default-directory))
                         (anki-editor-mode)
                       ())))

(add-hook 'anki-editor-mode-hook (lambda ()
                            (add-hook 'before-save-hook (cmd! (anki-editor-push-notes '(16))))))

(defun parent-dir (directory)
  (file-name-directory (directory-file-name directory)))

(defun parent-dirs (directory)
  ;; if directory == "/" return ("/")
  (if (equal directory "/")
      (list directory)
    ;; else return list containing directory and parent-dirs of the parent directory
    (cons directory (parent-dirs (parent-dir directory)))))
#+end_src

* Line Numbering
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

* Ispell
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ispell"
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "de_DE,en_GB,en_US")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "de_DE,en_GB,en_US")
  ;; For saving words to the personal dictionary, don't infer it from
  ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
  (setq ispell-personal-dictionary "~/.config/doom/.dictionary.txt"))
#+END_SRC

The personal dictionary file has to exist, otherwise hunspell will silently not use it.
#+BEGIN_SRC emacs-lisp
(unless (file-exists-p ispell-personal-dictionary)
  (write-region "" nil ispell-personal-dictionary nil 0))
#+END_SRC

* Better Defaults
#+BEGIN_SRC emacs-lisp
(setq-default
 delete-by-moving-to-trash t)          ; Delete files to trash

(setq undo-limit 80000000             ; Raise undo-limit to 80Mb
      evil-want-fine-undo t           ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t)             ; Nobody likes to loose work, I certainly don't
#+END_SRC

* Very Large Files
#+BEGIN_SRC emacs-lisp
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+END_SRC

* Key Mapping
** Avy
#+BEGIN_SRC emacs-lisp
(map! :n "g s s" 'evil-avy-goto-char-timer)
#+END_SRC
** Zen mode
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Zen mode (fullscreen)"
      "t z" '+zen/toggle-fullscreen
      "t Z" nil)
#+END_SRC
** Org Tree Slide
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "org-tree-slide"
  (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
  (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)
  )
#+END_SRC
