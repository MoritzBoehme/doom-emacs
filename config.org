#+TITLE: Emacs Config
#+STARTUP: showeverything

* Table of contents :TOC_3:
- [[#user-information][User Information]]
- [[#fonts][Fonts]]
- [[#theme][Theme]]
- [[#org][Org]]
  - [[#org-roam][Org Roam]]
    - [[#roam-capture-templates][Roam capture templates]]
    - [[#org-roam-ui][Org Roam UI]]
- [[#line-numbering][Line Numbering]]
- [[#ispell][Ispell]]
- [[#key-mapping][Key Mapping]]
  - [[#avy][Avy]]
  - [[#zen-mode][Zen mode]]

* User Information
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Moritz BÃ¶hme"
      user-mail-address "mail@moritzboeh.me")
#+END_SRC

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:
+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:
#+BEGIN_EXAMPLE emacs-lisp
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 14) )
#+END_SRC

* Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dracula)
#+END_SRC

* Org
Store org files under Documents directory.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Documents/org")
#+END_SRC

** Org Roam
*** Roam capture templates
#+BEGIN_SRC emacs-lisp
(setq org-roam-directory "~/Documents/org-roam")
(after! org-roam
  :custom
  (setq org-roam-capture-templates
        '(
          ("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("s" "semester" plain (file "~/Documents/org-roam/templates/semester-template.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("m" "modul" plain (file "~/Documents/org-roam/templates/modul-template.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("D" "dozent" plain (file "~/Documents/org-roam/templates/dozent-template.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          ("k" "kapitel" plain (file "~/Documents/org-roam/templates/kapitel-template.org")
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)
          )
        )
  )
#+END_SRC

*** Org Roam UI
#+BEGIN_SRC emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC

* Line Numbering
This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

* Ispell
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "ispell"
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "de_DE,en_GB,en_US")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "de_DE,en_GB,en_US")
  ;; For saving words to the personal dictionary, don't infer it from
  ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
  (setq ispell-personal-dictionary "~/.config/doom/.dictionary.txt"))
#+END_SRC

The personal dictionary file has to exist, otherwise hunspell will silently not use it.
#+BEGIN_SRC emacs-lisp
(unless (file-exists-p ispell-personal-dictionary)
  (write-region "" nil ispell-personal-dictionary nil 0))
#+END_SRC

* Key Mapping
** Avy
#+BEGIN_SRC emacs-lisp
(map! :n "g s s" 'evil-avy-goto-char-timer)
#+END_SRC
** Zen mode
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Zen mode (fullscreen)"
      "t z" '+zen/toggle-fullscreen
      "t Z" nil)
#+END_SRC
** Org Tree Slide
#+BEGIN_SRC emacs-lisp
(with-eval-after-load "org-tree-slide"
  (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
  (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)
  )
#+END_SRC

